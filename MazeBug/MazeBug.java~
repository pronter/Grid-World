import info.gridworld.actor.Actor;
import info.gridworld.actor.Bug;
import info.gridworld.actor.Flower;
import info.gridworld.actor.Rock;
import info.gridworld.grid.*;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Random;
import java.util.Stack;
import javax.swing.JOptionPane;
/**
 * A <code>MazeBug</code> can find its way in a maze. <br />
 * The implementation of this class is testable on the AP CS A and AB exams.
 */
public class MazeBug extends Bug {
    public Location next;
    public Location last;
    public boolean isEnd = false;
    public Stack<ArrayList<Location>> crossLocation = new Stack<ArrayList<Location>>();
    public Integer stepCount = 0;
    //final message has been shown
    boolean hasShown = false;
    private int[] probility = {0, 0, 0, 0};
    /**
     * Constructs a box bug that traces a square of a given side length
     * 
     * @param length
     *            the side length
     */
    public MazeBug() {
        setColor(Color.GREEN);
        last = new Location(0, 0);
    }
    /**
     * Moves to the next location of the square.
     */
    public void act() {
        //add the initial location to the first array list
        if (stepCount == 0) {
            Location local = this.getLocation();
            prediction();
            ArrayList<Location> first = new ArrayList<Location>();
            first.add(local);
            crossLocation.add(first);
        }
        /*
        if (stepCount == 341) {
            prediction();
        }*/
        boolean willMove = canMove();
        if (isEnd == true) {
        //to show step count when reach the goal
            if (hasShown == false) {
                String msg = stepCount.toString() + " steps";
                JOptionPane.showMessageDialog(null, msg);
                hasShown = true;
            }
        } else if (willMove) {
            move();
            //increase step count when move
            stepCount++;
        } else {
            //If can't move, return to last location
            goBack();
        }
    }

    /**
     * Find all positions that can be move to.
     * 
     * @param loc
     *            the location to detect.
     * @return List of positions.
     */
    public ArrayList<Location> getValid(Location loc) {
        Grid<Actor> gr = getGrid();
        if (gr == null)
            return null;
        ArrayList<Location> valid = new ArrayList<Location>();
        //get the valid location of the determined four direction
        int[] dir = {Location.NORTH, Location.EAST, Location.SOUTH, Location.WEST};
        for (int i = 0; i < 4; i++) {
            Location location = loc.getAdjacentLocation(dir[i]);
            if (gr.isValid(location)) {
                Actor a = gr.get(location);
                //if the goal is around, return the location of the goal
                if((a instanceof Rock) && a.getColor().equals(Color.RED)) {
                    next = location;
                    ArrayList<Location> test = new ArrayList<Location>();
                    test.add(next);
                    return test;
                } else if (a == null) {
                    valid.add(location);
                }
            }
        }
        return valid;
    }
    /**
     * Tests whether this bug can move forward into a location that is empty or
     * contains a flower.
     * 
     * @return true if this bug can move.
     */
    public boolean canMove() {
        ArrayList<Location> validLocation = new ArrayList<Location>();
        Location current = this.getLocation();
        validLocation = getValid(current);
        if (validLocation.size() != 0) {
            return true;
        }
        return false;
    }
    /**
     * Moves the bug forward, putting a flower into the location it previously
     * occupied.
     */
    public void move() {
        Grid<Actor> gr = getGrid();
        if (gr == null)
            return;
        Location loc = this.getLocation();
        ArrayList<Location> chooseLocation = getValid(loc);
        //according recently path, which direction move most has a high probility
        int max = 0;
        int j = 0;
        int total = 0;
        int whichOne = 0;
        for (Location got : chooseLocation) {
            int direc = loc.getDirectionToward(got);
            if(probility[direc / 90] > max){
                max = probility[direc / 90];
                j = (int) direc / 90;
                whichOne = total;
            }
            total++;
        }
        
        if (chooseLocation.size() == 1){
            next = chooseLocation.get(whichOne); 
            probility[j]++;
        }else {
            int randomNumber = (int) (Math.random() * 10);
            if (randomNumber >= 0 && randomNumber < 7) {
                next = chooseLocation.get(whichOne); 
                probility[j]++;
            } else {
                next = chooseLocation.get(randomNumber % chooseLocation.size()); 
                int dire = loc.getDirectionToward(next);
                j = dire / 90;
                probility[j]++;
            }
        }
        
        for (Location l : chooseLocation) {
            if (this.getDirection() == this.getLocation().getDirectionToward(l)) {
                next = l;
                int dire = loc.getDirectionToward(next);
                j = dire / 90;
                probility[j]++;
                break;
            }
        }
        
        if (gr.isValid(next)) {
            Actor actor = (Actor)gr.get(next);
            if (actor instanceof Rock && actor.getColor().equals(Color.RED)) {
                isEnd = true;
            }
            moveTo(next);
            int toward = loc.getDirectionToward(next);
            this.setDirection(toward);
            ArrayList<Location> temp = crossLocation.pop();
            temp.add(next);
            crossLocation.push(temp);
            ArrayList<Location> latest = new ArrayList<Location>();
            latest.add(next);
            crossLocation.push(latest);
        } else {
            removeSelfFromGrid();
        }
        System.out.println(stepCount);
        Flower flower = new Flower(getColor());
        flower.putSelfInGrid(gr, loc);
    }
    //goback to the vaild location
    public void goBack() {
        if (crossLocation.size() > 0) {
            crossLocation.pop();
            if (crossLocation.size() > 0) {
                Grid gr = getGrid();
                if ( gr == null ) {
                    return;
                }
                ArrayList<Location> back = crossLocation.peek();
                Location returnLocation = back.get(0);
                Location current = this.getLocation();
                //set the direction when the bug return
                int dir = current.getDirectionToward(returnLocation);
                if (gr.isValid(returnLocation)) {
                    this.setDirection(dir);
                    moveTo(returnLocation);
                    stepCount++;
                } else {
                    removeSelfFromGrid();
                }
                switch (dir) {
                    case 0:
                        probility[2]--;
                        break;
                    case 90:
                        probility[3]--;
                        break;
                    case 180:
                        probility[0]--;
                        break;
                    case 270:
                        probility[1]--;
                        break;
                }
                Flower flower = new Flower(getColor());
                flower.putSelfInGrid(gr, current);
            }
        }
    }
    //predict which direcition should go firstï¼Œchoose the location that close to the goal
    public void prediction(){
        Grid<Actor> gr = getGrid();
        ArrayList<Location> array = gr.getOccupiedLocations();
        for (Location l : array) {
            Actor act = (Actor) gr.get(l);
            if (act instanceof Rock && act.getColor().equals(Color.RED)) {
                Location loc = this.getLocation();
                if (loc.getRow() < l.getRow()) {
                    probility[2]++;
                } else {
                    probility[0]++;
                }
                if (loc.getCol() < l.getCol()) {
                    probility[1]++;
                } else {
                    probility[3]++;
                }
                break;
            }
        }
    }
}
